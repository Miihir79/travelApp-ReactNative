{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Mihir Shah\\\\travelApp\\\\screens\\\\Dashboard.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { dummyData, SIZES, FONTS, COLORS, icons, images } from \"../constants\";\nvar COUNTRIES_ITEM_SIZE = SIZES.width / 3;\n\nvar Dashboard = function Dashboard(_ref) {\n  var navigation = _ref.navigation;\n  var countryScrollX = useRef(new Animated.Value(0)).current;\n\n  var _useState = useState([{\n    id: -1\n  }].concat(_toConsumableArray(dummyData.countries), [{\n    id: -2\n  }])),\n      _useState2 = _slicedToArray(_useState, 2),\n      countries = _useState2[0],\n      setCountries = _useState2[1];\n\n  function renderHeader() {\n    return React.createElement(View, {\n      style: {\n        flexDirection: 'row',\n        paddingHorizontal: SIZES.padding,\n        paddingVertical: SIZES.base,\n        alignItems: 'center',\n        marginTop: 40\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }\n    }, React.createElement(TouchableOpacity, {\n      style: {\n        width: 45,\n        height: 45,\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      onPress: function onPress() {\n        return console.log(\"SLide Drawer\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }\n    }, React.createElement(Image, {\n      source: icons.side_drawer,\n      resizeMode: \"contain\",\n      style: {\n        width: 25,\n        height: 25,\n        tintColor: COLORS.white\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }\n    })), React.createElement(View, {\n      style: {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }\n    }, React.createElement(Text, {\n      style: _objectSpread({\n        color: COLORS.white\n      }, FONTS.h3),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }\n    }, \"ASIA\")), React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        return console.log(\"Profile\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }\n    }, React.createElement(Image, {\n      source: images.profile_pic,\n      resizeMode: \"contain\",\n      style: {\n        width: 45,\n        height: 45,\n        borderRadius: 30\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }\n    })));\n  }\n\n  function renderCountries() {\n    var _this2 = this;\n\n    return React.createElement(Animated.FlatList, {\n      horizontal: true,\n      pagingEnabled: true,\n      snapToAlignment: \"center\",\n      snapToInterval: COUNTRIES_ITEM_SIZE,\n      showsHorizontalScrollIndicator: false,\n      scrollEventThrottle: 16,\n      decelerationRate: 0,\n      data: countries,\n      keyExtractor: function keyExtractor(item) {\n        return \"\" + item.id;\n      },\n      onScroll: Animated.event([{\n        nativeEvent: {\n          contentOffset: {\n            x: countryScrollX\n          }\n        }\n      }], {\n        useNativeDriver: false\n      }),\n      renderItem: function renderItem(_ref2) {\n        var item = _ref2.item,\n            index = _ref2.index;\n        var opacity = countryScrollX.interpolate({\n          inputRange: [(index - 2) * COUNTRIES_ITEM_SIZE, (index - 1) * COUNTRIES_ITEM_SIZE, index * COUNTRIES_ITEM_SIZE],\n          outputRange: [0.3, 1, 0.3],\n          extrapolate: 'clamp'\n        });\n        return React.createElement(View, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }\n        }, React.createElement(Text, {\n          style: {\n            color: COLORS.white\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 29\n          }\n        }, item.name));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    });\n  }\n\n  return React.createElement(SafeAreaView, {\n    style: {\n      flex: 1,\n      backgroundColor: COLORS.black\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, renderHeader(), React.createElement(ScrollView, {\n    contentContainerStyle: {\n      paddingBottom: Platform.OS === 'ios' ? 40 : 0\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: {\n      height: 700\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }\n  }, React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 21\n    }\n  }, renderCountries()))));\n};\n\nexport default Dashboard;","map":{"version":3,"sources":["C:/Users/Mihir Shah/travelApp/screens/Dashboard.js"],"names":["React","useState","useRef","dummyData","SIZES","FONTS","COLORS","icons","images","COUNTRIES_ITEM_SIZE","width","Dashboard","navigation","countryScrollX","Animated","Value","current","id","countries","setCountries","renderHeader","flexDirection","paddingHorizontal","padding","paddingVertical","base","alignItems","marginTop","height","justifyContent","console","log","side_drawer","tintColor","white","flex","color","h3","profile_pic","borderRadius","renderCountries","item","event","nativeEvent","contentOffset","x","useNativeDriver","index","opacity","interpolate","inputRange","outputRange","extrapolate","name","backgroundColor","black","paddingBottom","Platform","OS"],"mappings":"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","sourcesContent":["import React,{useState,useRef} from 'react';\nimport {\n    View,\n    Text,\n    TouchableOpacity,\n    Image,\n    SafeAreaView,\n    Animated,\n    ScrollView,\n    Platform\n} from 'react-native';\n\nimport {dummyData,SIZES,FONTS,COLORS,icons,images} from '../constants'\n\nconst COUNTRIES_ITEM_SIZE= SIZES.width /3;\n\nconst Dashboard = ({ navigation }) => { \n\n    const countryScrollX = useRef(new Animated.Value(0)).current;\n\n    const [countries,setCountries] = useState([{id:-1},...dummyData.countries,{id:-2}])\n\n    function renderHeader(){\n        return(\n            <View style={{\n                flexDirection: 'row',\n                paddingHorizontal: SIZES.padding,\n                paddingVertical: SIZES.base,\n                alignItems: 'center',\n                marginTop:40\n            }}>\n\n                <TouchableOpacity style={{\n                    width:45,\n                    height:45,\n                    alignItems:'center',\n                    justifyContent:'center'\n                }}\n                onPress={()=>console.log(\"SLide Drawer\")}\n                >\n                    <Image\n                    source={icons.side_drawer}\n                    resizeMode ='contain'\n                    style={{\n                        width:25,\n                        height:25,\n                        tintColor:COLORS.white\n                    }}\n                    >\n\n                    </Image>\n                </TouchableOpacity>\n\n                <View style={{flex:1,alignItems:'center',justifyContent:'center'}}>\n                    <Text style={{color:COLORS.white, ...FONTS.h3}}>\n                        ASIA\n                    </Text>\n                </View>\n\n                <TouchableOpacity onPress={()=> console.log(\"Profile\")}>\n                    <Image source={images.profile_pic}\n                    resizeMode=\"contain\"\n                    style={{\n                        width:45,\n                        height:45,\n                        borderRadius:30\n                    }}>\n\n                    </Image>\n                </TouchableOpacity>\n            </View>\n        )\n    }\n\n    function renderCountries(){\n        return(\n            <Animated.FlatList\n\n                horizontal\n                pagingEnabled\n                snapToAlignment='center'\n                snapToInterval={COUNTRIES_ITEM_SIZE}\n                showsHorizontalScrollIndicator={false}\n                scrollEventThrottle={16}\n                decelerationRate={0}\n                data={countries}\n                keyExtractor={item =>`${item.id}`}\n                onScroll={Animated.event([\n                    {nativeEvent: {contentOffset:{x:countryScrollX}}}\n                ], {useNativeDriver:false}\n                )}\n\n                renderItem={({item,index}) =>{\n\n                    const opacity = countryScrollX.interpolate({\n                        inputRange:[\n                            (index-2) * COUNTRIES_ITEM_SIZE,\n                            (index-1) * COUNTRIES_ITEM_SIZE,\n                            (index) * COUNTRIES_ITEM_SIZE,\n                        ],\n                        outputRange:[0.3,1,0.3],\n                        extrapolate:'clamp'\n                    })\n                    return(\n                        <View>\n                            <Text style={{color:COLORS.white}}>\n                                {item.name}\n                            </Text>\n                        </View>\n                    )\n                }}\n            >\n\n            </Animated.FlatList>\n        )\n    }\n\n    return (\n        <SafeAreaView style={{ flex:1,backgroundColor:COLORS.black}}>\n            {renderHeader()}\n            <ScrollView contentContainerStyle={{\n                paddingBottom:Platform.OS === 'ios'? 40:0\n            }}>\n                <View style={{ height:700}}>\n                    <View>\n                        {renderCountries()}\n                    </View>\n                </View>\n            </ScrollView>\n        </SafeAreaView>\n    )\n}\n\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}